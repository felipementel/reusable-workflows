name: Sanbox Dispatch ‚ö°
run-name: "${{ github.actor }} - ${{ github.run_id }}"

#Secrets on Caller: GITLEAKS_LICENSE, SNYK_TOKEN, SONAR_TOKEN, SONAR_PROJECT_KEY
#VARS on Caller: SONAR_ORGANIZATION
on:
  pull_request:
    branches:
      - main
    types:
      closed
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docker/**'
      - 'docs/**'
  workflow_call:
    inputs:
      buildMode:
        description: "Qual a√ß√£o deseja fazer?"
        required: true
        default: 'Build'
        type: string
      environment:
        type: string
        description: 'Environment to run the workflow'
        required: true
        default: 'DEV'
      gitLeaks:
        type: boolean
        description: 'Run GitLeaks'
        required: false
        default: true
      sonarQube:
        type: boolean
        description: 'Run SonarQube'
        required: false
        default: true
      testsFolder:
        type: string
        description: 'The main test folder'
        required: false
        default: './tests'
      unitTests:
        type: boolean
        description: 'Run Unit Tests'
        required: false
        default: true
      snyk:
        type: boolean
        description: 'Snyk.io'
        required: false
        default: true
      msgCanalDeploy:
        type: string
        description: 'Message to be displayed in the summary'
        required: false
        default: 'Canal DEPLOY - O melhor canal sobre .NET, Azure, DevOps e IA'
      #build config
      dotnetVersion:
        type: string
        description: '.NET Version'
        required: true
        default: 9.x
      projectBaseDir:
        type: string
        description: 'Path to SLNX file'
        required: true
        default: ./src
      solutionFileName:
        type: string
        description: 'The SLNX or SLN full name. eg: DEPLOY.PROJECT.API.slnx'
        required: true
        default: ""
      mainProject:
        type: string
        description: 'The main project. eg: DEPLOY.PROJECT.API'
        required: true
        default: ""
      reportTitle:
        type: string
        description: 'Message to be displayed in the unit test report title'
        required: true
        default: 'Canal DEPLOY'
      #build use
      sonarExclusions:
        type: string
        description: 'Path to exclusion from sonar, like migrations. Use comma separation'
        required: true
        default: ""
      #push-image
      imageName:
        type: string
        description: 'Image name to publish at github packages'
        required: true
        default: ""
      openAPIFolder:
        type: string
        description: 'Path to the folder containing OpenAPI specification files. This folder should include all necessary YAML or JSON files for API documentation.'
        required: true
        default: "open-api"
    secrets:
      SONAR_PROJECT_KEY:
        required: true
        description: 'Sonar Project Key'
      GITLEAKS_LICENSE:
        required: true
        description: 'Gitleaks License'
      SNYK_TOKEN:
        required: true
        description: 'Snyk Token'
      SONAR_TOKEN:
        required: true
        description: 'Sonar Token'
env:
  RED: '\033[0;31m'
  GREEN: '\033[0;32m'
  YELLOW: '\033[0;33m'
  BLUE: '\033[0;34m'
  RESET: '\033[0m'
  BOLD: '\033[1m'
  UNDERLINE: '\033[4m'
  BOLD_UNDERLINE: '\033[1;4m'
  BOLD_RED: '\033[1;31m'
  BOLD_GREEN: '\033[1;32m'
  BOLD_YELLOW: '\033[1;33m'
  BOLD_BLUE: '\033[1;34m'

  javaVersion: 23
  javaDistro: zulu
  nodeVersion: 22

jobs:
  build:
    name: Build
    environment: ${{ inputs.environment }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    outputs:
      tag-version: ${{ steps.get-version.outputs.TAG }}
      now: ${{ steps.get-env.outputs.NOW }}
      image-exists: ${{ steps.check-image-and-tag.outputs.IMAGE_EXISTS }}
    runs-on: ubuntu-latest
    timeout-minutes: 4
    permissions:
      contents: write
      security-events: write

    steps:
      - name: Get Environment
        id: get-env
        run: |
          echo -e "${GREEN} ‚ö†Ô∏è Environment ${{ inputs.environment }}"
          echo "NOW=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Sys - Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            src
            tests
          sparse-checkout-cone-mode: false

      - name: Sys - Get-Version from csproj
        id: get-version
        shell: bash
        run: |
          csproj_path="${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj"

          # Extrair os valores
          version=$(sed -n 's/.*<Version>\(.*\)<\/Version>.*/\1/p' "$csproj_path")
          versionPrefix=$(sed -n 's/.*<VersionPrefix>\(.*\)<\/VersionPrefix>.*/\1/p' "$csproj_path")
          versionSuffix=$(sed -n 's/.*<VersionSuffix>\(.*\)<\/VersionSuffix>.*/\1/p' "$csproj_path")

          # Validar vers√£o
          if [[ -z "$version" ]]; then
            echo -e "${RED}‚ùå Erro: A tag <Version> √© obrigat√≥ria no arquivo .csproj"
            exit 1
          fi

          # Montar TAG
          tag="$version"
          if [[ -n "$versionPrefix" ]]; then
            tag="${versionPrefix}-${tag}"
            ColorTagPrefix="${GREEN}"
          else
            ColorTagPrefix="${YELLOW}"
          fi

          if [[ -n "$versionSuffix" ]]; then
            tag="${tag}-${versionSuffix}"
            ColorTagSuffix="${GREEN}"
          else
            ColorTagSuffix="${YELLOW}"
          fi

          echo "::group::üîç Informa√ß√µes de vers√£o extra√≠das"
          echo -e "üì¶${GREEN} Version: $version"
          echo -e "‚¨ÖÔ∏è${ColorTagPrefix} Prefix: ${versionPrefix:-n/a}"
          echo -e "‚û°Ô∏è${ColorTagSuffix} Suffix: ${versionSuffix:-n/a}"
          echo -e "üè∑Ô∏è${GREEN} TAG final: $tag"
          echo "::endgroup::"

          echo "TAG=$tag" >> "$GITHUB_OUTPUT"
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"
          echo "VERSION_PREFIX=$versionPrefix" >> "$GITHUB_OUTPUT"
          echo "VERSION_SUFFIX=$versionSuffix" >> "$GITHUB_OUTPUT"
      
      - name: Sys - Setup .NET version ${{ inputs.dotnetVersion }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnetVersion }}

      - name: ‚úÖ Check .NET version in use
        run: |
          echo "DOTNET_ROOT: $DOTNET_ROOT"
          $DOTNET_ROOT/dotnet --info        

      - name: üß™ Install dotnet-reportgenerator-globaltool and dotnet-coverage

        if: ${{ inputs.unitTests }}
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet tool install --global dotnet-coverage

      - name: üß± Git Leaks
        uses: gitleaks/gitleaks-action@v2
        if: ${{ inputs.gitLeaks }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          GITLEAKS_ENABLE_SUMMARY: true
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: true
          GITLEAKS_NOTIFY_USER_LIST: '@felipementel'

      - name: üîê Set up JDK ${{ env.javaDistro }} ${{ env.javaVersion }}  to use with SonarCloud
        if: ${{ inputs.sonarQube }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.javaVersion }}
          distribution: ${{ env.javaDistro }}

      - name: üîê SonarCloud packages cache
        uses: actions/cache@v4
        if: ${{ inputs.sonarQube }}
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: üîê SonarCloud scanner cache
        id: cache-sonar-scanner
        if: ${{ inputs.sonarQube }}
        uses: actions/cache@v4
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: üîê SonarCloud scanner installer
        if: ${{ inputs.sonarQube }} #&& (steps.cache-sonar-scanner.outputs.cache-hit != 'true')
        run: |
          mkdir -p .sonar/scanner
          dotnet tool install --global dotnet-sonarscanner 
        #--tool-path .sonar/scanner

      - name: üêã Set up Docker
        run: |
          sudo apt-get update
          sudo curl -fsSL https://get.docker.com -o install-docker.sh
          sudo sh install-docker.sh
          sudo usermod -aG docker $USER
          docker --version

      - name: üß™ Run tests and generate coverage (Test ‚úÖ)
        if: ${{ inputs.unitTests }}
        run: |
          index=0
          coverageFiles=""
          for proj in $(find ${{ inputs.testsFolder }} -name '*.csproj'); do
            echo -e "${GREEN}‚û°Ô∏è Rodando testes com cobertura para: $proj"
            dotnet-coverage collect "dotnet test $proj --no-build --configuration Debug" \
              --output-format xml \
              --output "coverage-$index.xml"
            coverageFiles="$coverageFiles coverage-$index.xml"
            index=$((index+1))
          done

          echo -e "${YELLOW}‚û°Ô∏è Mesclando arquivos de cobertura..."
          dotnet-coverage merge -f xml -o coverage-merged.xml \
            $coverageFiles

          for proj in $(find ${{ inputs.testsFolder }} -name '*.csproj'); do
            echo "‚û°Ô∏è Rodando testes com cobertura para: $proj"
            dotnet test $proj \
                --verbosity Minimal \
                --configuration Debug \
                --collect:"XPlat Code Coverage"
            index=$((index+1))
          done
            
          echo -e "${YELLOW}‚û°Ô∏è Gerando relat√≥rio HTML e Cobertura..."
          reportgenerator \
            -reports:"**/TestResults/**/coverage.cobertura.xml" \
            -targetdir:"coveragereport" \
            -reportTypes:"Cobertura;Html;MarkdownSummaryGithub;SonarQube" \
            -title:${{ inputs.reportTitle }} \
            -tag:'${{ github.run_number }}_${{ github.run_id }}'
            
      - name: üß™ Upload coverage report artifact
        if: ${{ inputs.unitTests }}
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: coveragereport
          
      - name: üîê Build, analyze and use coverage (Test ‚úÖ, Sonar ‚úÖ)
        if: ${{ inputs.unitTests && inputs.sonarQube }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ vars.SONAR_ORGANIZATION }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.scanner.scanAll=false \
            /d:sonar.cs.vscoveragexml.reportsPaths=coverage-merged.xml \
            /d:sonar.scanner.skipJreProvisioning=true \
            /d:sonar.scanner.javaExePath=${JAVA_HOME}/bin/java \
            /d:sonar.exclusions="${{ inputs.sonarExclusions || ' '}}"
          dotnet restore ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj
          dotnet build ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj \
            --no-incremental \
            --no-restore
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: üîê Build, analyze and not use coverage (Test ‚õî, Sonar ‚úÖ)
        if: ${{ !inputs.unitTests && inputs.sonarQube }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ vars.SONAR_ORGANIZATION }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.scanner.scanAll=false \
            /d:sonar.scanner.skipJreProvisioning=true \
            /d:sonar.scanner.javaExePath=${JAVA_HOME}/bin/java \
            /d:sonar.exclusions="${{ inputs.sonarExclusions || ' '}}"
          dotnet restore ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj
          dotnet build ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj --no-incremental --no-restore
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # - name: üß™ ReportGenerator
      #   uses: danielpalme/ReportGenerator-GitHub-Action@5.4.5
      #   with:
      #     #reports: '**/*coverage.xml'
      #     reports: 'coverage.cobertura.xml'
      #     targetdir: 'coveragereport'
      #     reporttypes: 'HtmlInline;Cobertura'
      #     assemblyfilters: '+*'
      #     classfilters: '-*.Migrations.*'
      #     filefilters: '+*'
      #     verbosity: 'Verbose'
      #     title: ${{ inputs.reportTitle }}
      #     tag: '${{ github.run_number }}_${{ github.run_id }}'
      #     toolpath: 'reportgeneratortool'

      - name: üçµ Restore dependencies
        run: |
          dotnet restore ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj
          dotnet build ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/${{ inputs.mainProject }}.csproj \
            --no-restore \
            --output ./output_build

      - name: üçµ Snyk Setup
        uses: snyk/actions/setup@master

      - name: üçµ Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --file=${{ inputs.projectBaseDir }}/${{ inputs.solutionFileName }}

      - name: üçµ Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

      - name: üéóÔ∏è Setup Node.js ${{ env.nodeVersion }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.nodeVersion }}

      - name: üéóÔ∏è Install Spectral
        run: npm install -g @stoplight/spectral

      - name: üéóÔ∏è Run Spectral Lint with custom ruleset
        run: |
          spectral lint \
            --format stylish \
            --format junit \
            --output.junit spectral-report.xml \
            "output_build/${{ inputs.openAPIFolder }}/*.json" \
            --ruleset https://raw.githubusercontent.com/connectedcircuits/devops-api-linter/main/rules.yaml
        continue-on-error: true

      - name: üéóÔ∏è Run Spectral Lint with OWASP ruleset
        run: |
          spectral lint \
            --format stylish \
            --format junit \
            --output.junit spectral-owasp.xml \
            "output_build/${{ inputs.openAPIFolder }}/*.json" \
            --ruleset https://unpkg.com/@stoplight/spectral-owasp-ruleset
        continue-on-error: true

      - name: üéóÔ∏è Upload Spectral Lint Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: spectral-results
          path: spectral-*.xml

      - name: üßæ Write to workflow job summary
        run: |
          SUMMARY=$GITHUB_STEP_SUMMARY$'
          # Vers√£o gerada\n
          | versao | data | 
          |--|--|
          | ${{ steps.get-version.outputs.tag }} | ${{ steps.get-env.outputs.now }} | \n
          Mensagem: ${{ inputs.msgCanalDeploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  check-image:
    name: Check if image exists
    if: ${{ inputs.buildMode == 'Build + Tag Validation' }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      image-exists: ${{ steps.check-image-and-tag.outputs.IMAGE_EXISTS }}
    needs: build
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image with same tag exists
        id: check-image-and-tag
        run: |
          IMAGE_TAG="ghcr.io/${{ github.actor }}/deploy.${{ inputs.imageName }}:${{ needs.build.outputs.tag-version }}"
          echo "Checking existence of $IMAGE_TAG..."
          if docker manifest inspect "$IMAGE_TAG" > /dev/null 2>&1; then
            echo -e "‚úÖ ${GREEN} Image exists in registry"
            echo "IMAGE_EXISTS=true" >> "$GITHUB_OUTPUT"
          else
            echo -e "üîç ${RED} Image does not exist in registry"
            echo "IMAGE_EXISTS=false" >> "$GITHUB_OUTPUT"
          fi
          
  push-image:
    name: Push image to Registry
    if: ${{ inputs.buildMode == 'Build + Tag Validation' && needs.check-image.outputs.image-exists == 'false' }}
    environment: ${{ inputs.environment }}
    # if: ${{ github.event.pull_request.merged && github.event.pull_request.state == 'closed' }}
    needs: [build, check-image]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            src
          sparse-checkout-cone-mode: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          buildkitd-flags: --debug
          platforms: linux/amd64,linux/arm64

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.actor }}/deploy.${{ inputs.imageName }}

      - name: Build and push ghcr
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.projectBaseDir }}
          file: ${{ inputs.projectBaseDir }}/${{ inputs.mainProject }}/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.actor }}/deploy.${{ inputs.imageName }}:latest
            ghcr.io/${{ github.actor }}/deploy.${{ inputs.imageName }}:${{ needs.build.outputs.tag-version }}
          labels: |
            ${{ steps.meta.outputs.labels }}

      - name: Write to workflow job summary DEPLOY
        run: |
          SUMMARY=$'
          # Image publicada\n
          | versao | data | 
          |--|--|
          | ${{ needs.build.outputs.tag-version }} | ${{ needs.build.outputs.now }} | \n
          Mensagem: ${{ inputs.msgCanalDeploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  publish:
    name: Publish
    if: ${{ inputs.buildMode == 'Build + Tag Validation' }}
    needs: [push-image]
    environment: ${{ inputs.environment }}
    # if: ${{ github.event.pull_request.merged && github.event.pull_request.state == 'closed' }}
    runs-on: ubuntu-latest
    steps:
      - name: Write to workflow job summary DEPLOY
        run: |
          SUMMARY=$'
          # Detalhes sobre publica√ß√£o\n
          | versao | data | 
          |--|--|
          | ${{ needs.build.outputs.tag-version }} | ${{ needs.build.outputs.now }} | \n
          Mensagem: ${{ inputs.msgCanalDeploy }}\n'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
          
  notify-image-exists:
    name: Notify when already image exists
    if: ${{ inputs.buildMode == 'Build + Tag Validation' && needs.check-image.outputs.image-exists == 'true'}}
    needs: [build, check-image]
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Write to workflow job summary
        run: |
          echo "Image with tag ${{ needs.build.outputs.tag-version }} already exists. Skipping push image to registry and publish on Azure Cloud." >> $GITHUB_STEP_SUMMARY
